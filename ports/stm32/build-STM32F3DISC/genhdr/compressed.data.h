#define MP_MAX_UNCOMPRESSED_TEXT_LEN (73)
MP_COMPRESSED_DATA("can'\364objec\364doesn'\364mus\364invali\344'%q\247argumen\364argument\363functio\356no\364'%s\247unsupporte\344forma\364b\345%\344exis\364o\346t\357typ\345expect\363implemente\344supporte\344conver\364keywor\344strin\347positiona\354require\344fo\362\341specifie\362lengt\350inde\370to\357i\363wit\350i\356ar\347attribut\345intege\362a\356an\344empt\371isn'\364rang\345require\363reserve\344assignmen\364identifie\362outsid\345expectin\347generato\362hav\345valu\345ExtIn\364synta\370expecte\344sequenc\345capabilitie\363fro\355Pin(%q\251comple\370erro\362fiel\344ha\363missin\347need\363n\357o\362retur\356Timer(%d\251in\364nam\345operatio\356ou\364redefine\344afte\362callabl\345foun\344multipl\345nonloca\354overflo\367registe\362tupl\345AD\303CAN(%d\251allowe\344alread\371bu\364indice\363struct\272suppor\364unknow\356us\345%\361a\364bit\363lis\364lon\347man\371nee\344zer\357buffe\362impor\364metho\344nativ\345numbe\362sck/mosi/mis\357specificatio\356value\363vecto\362incompatibl\345issubclass(\251%\363Time\362ba\344byte\363clas\363give\356instructio\356labe\354larg\345loca\354matc\350pi\356se\364stor\345wron\347allocatio\356")
MP_MATCH_COMPRESSED("%c needs int or char", "\377%c\301\306\303char")
MP_MATCH_COMPRESSED("%q index out of range", "\377\335\237\311\220\253")
MP_MATCH_COMPRESSED("%q indices must be integers, not %s", "\377\335\330\203\215integers,\211\360")
MP_MATCH_COMPRESSED("'%q' argument required", "\377\205\206\232")
MP_MATCH_COMPRESSED("'%s' expects a label", "\377\212\223\234\367")
MP_MATCH_COMPRESSED("'%s' expects a register", "\377\212\223\234\321")
MP_MATCH_COMPRESSED("'%s' expects a special register", "\377\212\223\234special\321")
MP_MATCH_COMPRESSED("'%s' expects an FPU register", "\377\212\223\247FPU\321")
MP_MATCH_COMPRESSED("'%s' expects an address of the form [a, b]", "\377\212\223\247address\220the form [a, b]")
MP_MATCH_COMPRESSED("'%s' expects an integer", "\377\212\223\247\246")
MP_MATCH_COMPRESSED("'%s' expects at most r%d", "\377\212\223\336most r%d")
MP_MATCH_COMPRESSED("'%s' expects {r0, r1, ...}", "\377\212\223{r0, r1, ...}")
MP_MATCH_COMPRESSED("'%s' integer 0x%x doesn't fit in mask 0x%x", "\377\212\2460x%x\202fit\243mask 0x%x")
MP_MATCH_COMPRESSED("'%s' object doesn't support item assignment", "\377\212\201\202\332item\256")
MP_MATCH_COMPRESSED("'%s' object doesn't support item deletion", "\377\212\201\202\332item deletion")
MP_MATCH_COMPRESSED("'%s' object has no attribute '%q'", "\377\212\201\277\302\245\205")
MP_MATCH_COMPRESSED("'%s' object isn't an iterator", "\377\212\201\252\247iterator")
MP_MATCH_COMPRESSED("'%s' object isn't callable", "\377\212\201\252\314")
MP_MATCH_COMPRESSED("'%s' object isn't iterable", "\377\212\201\252iterable")
MP_MATCH_COMPRESSED("'%s' object isn't subscriptable", "\377\212\201\252subscriptable")
MP_MATCH_COMPRESSED("'=' alignment not allowed in string format specifier", "\377'=' alignment\211\325\243\230\214\235")
MP_MATCH_COMPRESSED("'align' requires 1 argument", "\377'align'\2541\206")
MP_MATCH_COMPRESSED("'await' outside function", "\377'await'\260\210")
MP_MATCH_COMPRESSED("'break'/'continue' outside loop", "\377'break'/'continue'\260loop")
MP_MATCH_COMPRESSED("'data' requires at least 2 arguments", "\377'data'\254\336least 2\207")
MP_MATCH_COMPRESSED("'data' requires integer arguments", "\377'data'\254\246\207")
MP_MATCH_COMPRESSED("'label' requires 1 argument", "\377'label'\2541\206")
MP_MATCH_COMPRESSED("'return' outside function", "\377'return'\260\210")
MP_MATCH_COMPRESSED("'yield' outside function", "\377'yield'\260\210")
MP_MATCH_COMPRESSED("* arg after **", "\377*\244\313**")
MP_MATCH_COMPRESSED("*x must be assignment target", "\377*x\203\215\256target")
MP_MATCH_COMPRESSED("0.0 to a complex power", "\3770.0\221\234\274power")
MP_MATCH_COMPRESSED("CAN data field too long", "\377CAN data\276\240\341")
MP_MATCH_COMPRESSED("CAN filter parameter error", "\377CAN filter parameter\275")
MP_MATCH_COMPRESSED("CAN(%d) doesn't exist", "\377\324\202\217")
MP_MATCH_COMPRESSED("CAN(%d) init failure", "\377\324init failure")
MP_MATCH_COMPRESSED("CAN(%d) is reserved", "\377\324\241\255")
MP_MATCH_COMPRESSED("CAN(%s) doesn't exist", "\377CAN(%s)\202\217")
MP_MATCH_COMPRESSED("DAC(%d) doesn't exist", "\377DAC(%d)\202\217")
MP_MATCH_COMPRESSED("ExtInt vector %d < 16, use a Pin object", "\377\265\355\216< 16,\334\234Pin\201")
MP_MATCH_COMPRESSED("ExtInt vector %d >= max of %d", "\377\265\355\216>= max\220\216")
MP_MATCH_COMPRESSED("ExtInt vector %d is already in use", "\377\265\355\216\241\326\243\334")
MP_MATCH_COMPRESSED("I/O operation on closed file", "\377I/O\310on closed file")
MP_MATCH_COMPRESSED("I2C must be a controller", "\377I2C\203\215\234controller")
MP_MATCH_COMPRESSED("I2C operation not supported", "\377I2C\310\211\225")
MP_MATCH_COMPRESSED("I2C(%d) doesn't exist", "\377I2C(%d)\202\217")
MP_MATCH_COMPRESSED("I2C(%d) is reserved", "\377I2C(%d)\241\255")
MP_MATCH_COMPRESSED("I2C(%s) doesn't exist", "\377I2C(%s)\202\217")
MP_MATCH_COMPRESSED("IRQ resource already taken by Pin('%q')", "\377IRQ resource\326taken by Pin('%q')")
MP_MATCH_COMPRESSED("LHS of keyword arg must be an id", "\377LHS\220\227\244\203\215\247id")
MP_MATCH_COMPRESSED("Pin(%q) does not have ADC capabilities", "\377\273does\211\263\323\271")
MP_MATCH_COMPRESSED("Pin(%q) doesn't have ADC capabilities", "\377\273\202\263\323\271")
MP_MATCH_COMPRESSED("Pin(%q) doesn't have DAC capabilities", "\377\273\202\263DAC\271")
MP_MATCH_COMPRESSED("Pin(%q) doesn't have an alt for Timer(%d)", "\377\273\202\263\247alt\233\305")
MP_MATCH_COMPRESSED("Pin(%s) doesn't exist", "\377Pin(%s)\202\217")
MP_MATCH_COMPRESSED("Pin.mapper didn't return a Pin object", "\377Pin.mapper didn't\304\234Pin\201")
MP_MATCH_COMPRESSED("SPI(%d) doesn't exist", "\377SPI(%d)\202\217")
MP_MATCH_COMPRESSED("SPI(%d) is reserved", "\377SPI(%d)\241\255")
MP_MATCH_COMPRESSED("SPI(%s) doesn't exist", "\377SPI(%s)\202\217")
MP_MATCH_COMPRESSED("Timer does not support DAC triggering", "\377\361does\211\332DAC triggering")
MP_MATCH_COMPRESSED("Timer doesn't exist", "\377\361\202\217")
MP_MATCH_COMPRESSED("Timer(%d) doesn't exist", "\377\305\202\217")
MP_MATCH_COMPRESSED("Timer(%d) is reserved", "\377\305\241\255")
MP_MATCH_COMPRESSED("UART is static and rxbuf can't be changed", "\377UART\241static\250rxbuf\200\215changed")
MP_MATCH_COMPRESSED("UART(%d) doesn't exist", "\377UART(%d)\202\217")
MP_MATCH_COMPRESSED("UART(%d) is reserved", "\377UART(%d)\241\255")
MP_MATCH_COMPRESSED("UART(%s) doesn't exist", "\377UART(%s)\202\217")
MP_MATCH_COMPRESSED("WDT timeout too long", "\377WDT timeout\240\341")
MP_MATCH_COMPRESSED("WDT timeout too short", "\377WDT timeout\240short")
MP_MATCH_COMPRESSED("WDT(%d) doesn't exist", "\377WDT(%d)\202\217")
MP_MATCH_COMPRESSED("__init__() should return None, not '%s'", "\377__init__() should\304None,\211\212")
MP_MATCH_COMPRESSED("abort() called", "abort() called")
MP_MATCH_COMPRESSED("addr argument required", "\377addr\206\232")
MP_MATCH_COMPRESSED("address %08x is not aligned to %d bytes", "\377address %08x\241\211aligned\221\216\363")
MP_MATCH_COMPRESSED("annotation must be an identifier", "\377annotation\203\215\247\257")
MP_MATCH_COMPRESSED("arg is an empty sequence", "\377\244\241\247\251\270")
MP_MATCH_COMPRESSED("arg must be user-type", "\377\244\203\215user-type")
MP_MATCH_COMPRESSED("argument has wrong type", "\377\206\277\376\222")
MP_MATCH_COMPRESSED("argument name reused", "\377\206\307reused")
MP_MATCH_COMPRESSED("argument num/types mismatch", "\377\206num/types mismatch")
MP_MATCH_COMPRESSED("array/bytes required on right side", "\377array/bytes\232on right side")
MP_MATCH_COMPRESSED("async for/with outside async function", "\377async for/with\260async\210")
MP_MATCH_COMPRESSED("attributes not supported yet", "\377attributes\211\225yet")
MP_MATCH_COMPRESSED("bad USB mode", "\377\362USB mode")
MP_MATCH_COMPRESSED("bad compile mode", "\377\362compile mode")
MP_MATCH_COMPRESSED("bad conversion specifier", "\377\362conversion\235")
MP_MATCH_COMPRESSED("bad typecode", "\377\362typecode")
MP_MATCH_COMPRESSED("binary op %q not implemented", "\377binary op\335\211\224")
MP_MATCH_COMPRESSED("bits must be 32 or less", "\377\337\203\21532\303less")
MP_MATCH_COMPRESSED("bits must be 8", "\377\337\203\2158")
MP_MATCH_COMPRESSED("branch not in range", "\377branch\211\243\253")
MP_MATCH_COMPRESSED("buffer too small", "\377\345\240small")
MP_MATCH_COMPRESSED("buffers must be the same length", "\377buffers\203\215the same\236")
MP_MATCH_COMPRESSED("bytecode overflow", "\377bytecode\320")
MP_MATCH_COMPRESSED("bytes value out of range", "\377\363\264\311\220\253")
MP_MATCH_COMPRESSED("calibration value out of range", "\377calibration\264\311\220\253")
MP_MATCH_COMPRESSED("callback must be None or a callable object", "\377callback\203\215None\303\234\314\201")
MP_MATCH_COMPRESSED("can only have up to 4 parameters to Thumb assembly", "\377can only\263up\2214 parameters\221Thumb assembly")
MP_MATCH_COMPRESSED("can't add special method to already-subclassed class", "\377\200add special\347\221already-subclassed\364")
MP_MATCH_COMPRESSED("can't assign to expression", "\377\200assign\221expression")
MP_MATCH_COMPRESSED("can't cancel self", "\377\200cancel self")
MP_MATCH_COMPRESSED("can't convert %s to complex", "\377\200\226\360\221\274")
MP_MATCH_COMPRESSED("can't convert %s to float", "\377\200\226\360\221float")
MP_MATCH_COMPRESSED("can't convert %s to int", "\377\200\226\360\221\306")
MP_MATCH_COMPRESSED("can't convert '%q' object to %q implicitly", "\377\200\226\205\201\221\335implicitly")
MP_MATCH_COMPRESSED("can't convert NaN to int", "\377\200\226NaN\221\306")
MP_MATCH_COMPRESSED("can't convert inf to int", "\377\200\226inf\221\306")
MP_MATCH_COMPRESSED("can't create '%q' instances", "\377\200create\205instances")
MP_MATCH_COMPRESSED("can't declare nonlocal in outer code", "\377\200declare\317\243outer code")
MP_MATCH_COMPRESSED("can't delete expression", "\377\200delete expression")
MP_MATCH_COMPRESSED("can't do binary op between '%q' and '%q'", "\377\200do binary op between\205\250\205")
MP_MATCH_COMPRESSED("can't implicitly convert '%q' to 'bool'", "\377\200implicitly\226\205\221'bool'")
MP_MATCH_COMPRESSED("can't import name %q", "\377\200\346\307\335")
MP_MATCH_COMPRESSED("can't load from '%q'", "\377\200load\272\205")
MP_MATCH_COMPRESSED("can't load with '%q' index", "\377\200load\242\205\237")
MP_MATCH_COMPRESSED("can't perform relative import", "\377\200perform relative\346")
MP_MATCH_COMPRESSED("can't send non-None value to a just-started generator", "\377\200send non-None\264\221\234just-started\262")
MP_MATCH_COMPRESSED("can't set attribute", "\377\200\374\245")
MP_MATCH_COMPRESSED("can't store '%q'", "\377\200\375\205")
MP_MATCH_COMPRESSED("can't store to '%q'", "\377\200\375\221\205")
MP_MATCH_COMPRESSED("can't store with '%q' index", "\377\200\375\242\205\237")
MP_MATCH_COMPRESSED("can't switch from automatic field numbering to manual field specification", "\377\200switch\272automatic\276numbering\221manual\276\353")
MP_MATCH_COMPRESSED("can't switch from manual field specification to automatic field numbering", "\377\200switch\272manual\276\353\221automatic\276numbering")
MP_MATCH_COMPRESSED("can't truncate-divide a complex number", "\377\200truncate-divide\234\274\351")
MP_MATCH_COMPRESSED("can't unambiguously get sizeof scalar", "\377\200unambiguously get sizeof scalar")
MP_MATCH_COMPRESSED("can't wait", "\377\200wait")
MP_MATCH_COMPRESSED("casting", "casting")
MP_MATCH_COMPRESSED("chr() arg not in range(0x110000)", "\377chr()\244\211\243range(0x110000)")
MP_MATCH_COMPRESSED("comparison of int and uint", "\377comparison\220\306\250uint")
MP_MATCH_COMPRESSED("complex divide by zero", "\377\274divide by\344")
MP_MATCH_COMPRESSED("compression header", "compression header")
MP_MATCH_COMPRESSED("conversion to object", "\377conversion\221\201")
MP_MATCH_COMPRESSED("couldn't match baudrate and sample point", "\377couldn't\372baudrate\250sample point")
MP_MATCH_COMPRESSED("default 'except' must be last", "\377default 'except'\203\215last")
MP_MATCH_COMPRESSED("dict update sequence has wrong length", "\377dict update\270\277\376\236")
MP_MATCH_COMPRESSED("div/mod not implemented for uint", "\377div/mod\211\224\233uint")
MP_MATCH_COMPRESSED("divide by zero", "\377divide by\344")
MP_MATCH_COMPRESSED("empty", "\377\251")
MP_MATCH_COMPRESSED("empty heap", "\377\251heap")
MP_MATCH_COMPRESSED("empty separator", "\377\251separator")
MP_MATCH_COMPRESSED("encoder not supported on timer %d", "\377encoder\211\225on timer\216")
MP_MATCH_COMPRESSED("encoding", "encoding")
MP_MATCH_COMPRESSED("error in regex", "\377\275\243regex")
MP_MATCH_COMPRESSED("exceptions must derive from BaseException", "\377exceptions\203derive\272BaseException")
MP_MATCH_COMPRESSED("expected ':' after format specifier", "\377\267':'\313\214\235")
MP_MATCH_COMPRESSED("expecting an SPI object", "\377\261\247SPI\201")
MP_MATCH_COMPRESSED("expecting an assembler instruction", "\377\261\247assembler\366")
MP_MATCH_COMPRESSED("expecting just a value for set", "\377\261just\234\264\233\374")
MP_MATCH_COMPRESSED("expecting key:value for dict", "\377\261key:value\233dict")
MP_MATCH_COMPRESSED("explicit choice of sck/mosi/miso is not implemented", "\377explicit choice\220\352\241\211\224")
MP_MATCH_COMPRESSED("explicit choice of scl/sda is not implemented", "\377explicit choice\220scl/sda\241\211\224")
MP_MATCH_COMPRESSED("extra keyword arguments given", "\377extra\227\207\365")
MP_MATCH_COMPRESSED("extra positional arguments given", "\377extra\231\207\365")
MP_MATCH_COMPRESSED("firstbit must be MSB", "\377firstbit\203\215MSB")
MP_MATCH_COMPRESSED("format needs a dict", "\377\214\301\234dict")
MP_MATCH_COMPRESSED("format string didn't convert all arguments", "\377\214\230didn't\226all\207")
MP_MATCH_COMPRESSED("format string needs more arguments", "\377\214\230\301more\207")
MP_MATCH_COMPRESSED("full", "full")
MP_MATCH_COMPRESSED("function doesn't take keyword arguments", "\377\210\202take\227\207")
MP_MATCH_COMPRESSED("function expected at most %d arguments, got %d", "\377\210\267\336most\216arguments, got\216")
MP_MATCH_COMPRESSED("function got multiple values for argument '%q'", "\377\210got\316\354\233\206\205")
MP_MATCH_COMPRESSED("function missing %d required positional arguments", "\377\210\300\216\232\231\207")
MP_MATCH_COMPRESSED("function missing keyword-only argument", "\377\210\300keyword-only\206")
MP_MATCH_COMPRESSED("function missing required keyword argument '%q'", "\377\210\300\232\227\206\205")
MP_MATCH_COMPRESSED("function missing required positional argument #%d", "\377\210\300\232\231\206#%d")
MP_MATCH_COMPRESSED("function takes %d positional arguments but %d were given", "\377\210takes\216\231\207\327\216were\365")
MP_MATCH_COMPRESSED("generator already executing", "\377\262\326executing")
MP_MATCH_COMPRESSED("generator ignored GeneratorExit", "\377\262ignored GeneratorExit")
MP_MATCH_COMPRESSED("generator raised StopIteration", "\377\262raised StopIteration")
MP_MATCH_COMPRESSED("handler must be None or callable", "\377handler\203\215None\303\314")
MP_MATCH_COMPRESSED("hard unsupported", "\377hard\213")
MP_MATCH_COMPRESSED("hash is final", "\377hash\241final")
MP_MATCH_COMPRESSED("heap must be a list", "\377heap\203\215\234\340")
MP_MATCH_COMPRESSED("identifier redefined as global", "\377\257\312as global")
MP_MATCH_COMPRESSED("identifier redefined as nonlocal", "\377\257\312as\317")
MP_MATCH_COMPRESSED("import * not at module level", "\377\346*\211\336module level")
MP_MATCH_COMPRESSED("incompatible .mpy arch", "\377\356.mpy arch")
MP_MATCH_COMPRESSED("incompatible .mpy file", "\377\356.mpy file")
MP_MATCH_COMPRESSED("incomplete format", "\377incomplete\214")
MP_MATCH_COMPRESSED("incomplete format key", "\377incomplete\214key")
MP_MATCH_COMPRESSED("incorrect padding", "incorrect padding")
MP_MATCH_COMPRESSED("inline assembler must be a function", "\377inline assembler\203\215\234\210")
MP_MATCH_COMPRESSED("int() arg 2 must be >= 2 and <= 36", "\377int()\2442\203\215>= 2\250<= 36")
MP_MATCH_COMPRESSED("integer needed", "\377\246needed")
MP_MATCH_COMPRESSED("invalid ExtInt Mode: %d", "\377\204\265Mode:\216")
MP_MATCH_COMPRESSED("invalid ExtInt Pull: %d", "\377\204\265Pull:\216")
MP_MATCH_COMPRESSED("invalid addrsize", "\377\204addrsize")
MP_MATCH_COMPRESSED("invalid arguments", "\377\204\207")
MP_MATCH_COMPRESSED("invalid channel (%d)", "\377\204channel (%d)")
MP_MATCH_COMPRESSED("invalid dupterm index", "\377\204dupterm\237")
MP_MATCH_COMPRESSED("invalid format", "\377\204\214")
MP_MATCH_COMPRESSED("invalid format specifier", "\377\204\214\235")
MP_MATCH_COMPRESSED("invalid freq", "\377\204freq")
MP_MATCH_COMPRESSED("invalid micropython decorator", "\377\204micropython decorator")
MP_MATCH_COMPRESSED("invalid mode (%d)", "\377\204mode (%d)")
MP_MATCH_COMPRESSED("invalid pin af: %d", "\377\204\373af:\216")
MP_MATCH_COMPRESSED("invalid pin mode: %d", "\377\204\373mode:\216")
MP_MATCH_COMPRESSED("invalid pin pull: %d", "\377\204\373pull:\216")
MP_MATCH_COMPRESSED("invalid polarity (%d)", "\377\204polarity (%d)")
MP_MATCH_COMPRESSED("invalid syntax", "\377\204\266")
MP_MATCH_COMPRESSED("invalid syntax for integer with base %d", "\377\204\266\233\246\242base\216")
MP_MATCH_COMPRESSED("invalid syntax for number", "\377\204\266\233\351")
MP_MATCH_COMPRESSED("issubclass() arg 1 must be a class", "\377\357\2441\203\215\234\364")
MP_MATCH_COMPRESSED("issubclass() arg 2 must be a class or a tuple of classes", "\377\357\2442\203\215\234\364\303\234\322\220classes")
MP_MATCH_COMPRESSED("join expects a list of str/bytes objects consistent with self object", "\377join\223\234\340\220str/bytes objects consistent\242self\201")
MP_MATCH_COMPRESSED("keyword argument(s) not yet implemented - use normal args instead", "\377\227argument(s)\211yet\224-\334normal args instead")
MP_MATCH_COMPRESSED("label '%q' not defined", "\377\367\205\211defined")
MP_MATCH_COMPRESSED("label redefined", "\377\367\312")
MP_MATCH_COMPRESSED("length of ADC and buffer lists differ", "\377\236\220\323\250\345lists differ")
MP_MATCH_COMPRESSED("lhs and rhs should be compatible", "\377lhs\250rhs should\215compatible")
MP_MATCH_COMPRESSED("local '%q' has type '%q' but source is '%q'", "\377\371\205\277\222\205\327source\241\205")
MP_MATCH_COMPRESSED("local '%q' used before type known", "\377\371\205used before\222known")
MP_MATCH_COMPRESSED("local variable referenced before assignment", "\377\371variable referenced before\256")
MP_MATCH_COMPRESSED("malformed f-string", "malformed f-string")
MP_MATCH_COMPRESSED("math domain error", "\377math domain\275")
MP_MATCH_COMPRESSED("memory allocation failed, allocating %u bytes", "\377memory\377failed, allocating %u\363")
MP_MATCH_COMPRESSED("memory allocation failed, heap is locked", "\377memory\377failed, heap\241locked")
MP_MATCH_COMPRESSED("mktime needs a tuple of length 8 or 9 (%d given)", "\377mktime\301\234\322\220\2368\3039 (%d given)")
MP_MATCH_COMPRESSED("multiple *x in assignment", "\377\316*x\243\256")
MP_MATCH_COMPRESSED("multiple bases have instance lay-out conflict", "\377\316bases\263instance lay-out conflict")
MP_MATCH_COMPRESSED("must have positive freq", "\377\203\263positive freq")
MP_MATCH_COMPRESSED("must raise an object", "\377\203raise\247\201")
MP_MATCH_COMPRESSED("must specify all of sck/mosi/miso", "\377\203specify all\220\352")
MP_MATCH_COMPRESSED("must specify either freq, period, or prescaler and period", "\377\203specify either freq, period,\303prescaler\250period")
MP_MATCH_COMPRESSED("must use keyword argument for key function", "\377\203\334\227\206\233key\210")
MP_MATCH_COMPRESSED("name '%q' isn't defined", "\377\307\205\252defined")
MP_MATCH_COMPRESSED("name too long", "\377\307\240\341")
MP_MATCH_COMPRESSED("native method too big", "\377\350\347\240big")
MP_MATCH_COMPRESSED("native yield", "\377\350yield")
MP_MATCH_COMPRESSED("need a Timer object", "\377\343\234\361\201")
MP_MATCH_COMPRESSED("need a UART object", "\377\343\234UART\201")
MP_MATCH_COMPRESSED("need at least 1 ADC", "\377\343\336least 1\323")
MP_MATCH_COMPRESSED("need more than %d values to unpack", "\377\343more than\216\354\221unpack")
MP_MATCH_COMPRESSED("negative factorial", "negative factorial")
MP_MATCH_COMPRESSED("negative shift count", "negative shift count")
MP_MATCH_COMPRESSED("no active exception to reraise", "\377\302active exception\221reraise")
MP_MATCH_COMPRESSED("no available NIC", "\377\302available NIC")
MP_MATCH_COMPRESSED("no binding for nonlocal found", "\377\302binding\233\317\315")
MP_MATCH_COMPRESSED("no module named '%q'", "\377\302module named\205")
MP_MATCH_COMPRESSED("no such attribute", "\377\302such\245")
MP_MATCH_COMPRESSED("non-default argument follows default argument", "\377non-default\206follows default\206")
MP_MATCH_COMPRESSED("non-hex digit found", "\377non-hex digit\315")
MP_MATCH_COMPRESSED("not a constant", "\377\211\234constant")
MP_MATCH_COMPRESSED("not a valid ADC Channel: %d", "\377\211\234valid\323Channel:\216")
MP_MATCH_COMPRESSED("object '%s' isn't a tuple or list", "\377\201\212\252\234\322\303\340")
MP_MATCH_COMPRESSED("object not in sequence", "\377\201\211\243\270")
MP_MATCH_COMPRESSED("object of type '%s' has no len()", "\377\201\220\222\212\277\302len()")
MP_MATCH_COMPRESSED("object with buffer protocol required", "\377\201\242\345protocol\232")
MP_MATCH_COMPRESSED("odd-length string", "\377odd-length\230")
MP_MATCH_COMPRESSED("only slices with step=1 (aka None) are supported", "\377only slices\242step=1 (aka None) are\225")
MP_MATCH_COMPRESSED("opcode", "opcode")
MP_MATCH_COMPRESSED("ord() expected a character, but string of length %d found", "\377ord()\267\234character,\327\230\220\236\216\315")
MP_MATCH_COMPRESSED("overflow converting long int to machine word", "\377\320converting\341\306\221machine word")
MP_MATCH_COMPRESSED("parameters must be registers in sequence r0 to r3", "\377parameters\203\215registers\243\270r0\221r3")
MP_MATCH_COMPRESSED("period too large", "\377period\240\370")
MP_MATCH_COMPRESSED("pin argument needs to be be a Pin type", "\377\373\206\301\221\215\215\234Pin\222")
MP_MATCH_COMPRESSED("pop from an empty set", "\377pop\272\247\251\374")
MP_MATCH_COMPRESSED("pop from empty list", "\377pop\272\251\340")
MP_MATCH_COMPRESSED("popitem(): dictionary is empty", "\377popitem(): dictionary\241\251")
MP_MATCH_COMPRESSED("positional arg after **", "\377\231\244\313**")
MP_MATCH_COMPRESSED("positional arg after keyword arg", "\377\231\244\313\227\244")
MP_MATCH_COMPRESSED("pow() with 3 arguments requires integers", "\377pow()\2423\207\254integers")
MP_MATCH_COMPRESSED("queue overflow", "\377queue\320")
MP_MATCH_COMPRESSED("raw f-strings are not supported", "\377raw f-strings are\211\225")
MP_MATCH_COMPRESSED("recv must be same length as send", "\377recv\203\215same\236as send")
MP_MATCH_COMPRESSED("requested length %d but object has length %d", "\377requested\236\216\327\201\277\236\216")
MP_MATCH_COMPRESSED("resolution %d not supported", "\377resolution\216\211\225")
MP_MATCH_COMPRESSED("return annotation must be an identifier", "\377\304annotation\203\215\247\257")
MP_MATCH_COMPRESSED("return expected '%q' but got '%q'", "\377\304\267\205\327got\205")
MP_MATCH_COMPRESSED("rsplit(None,n)", "rsplit(None,n)")
MP_MATCH_COMPRESSED("schedule queue full", "schedule queue full")
MP_MATCH_COMPRESSED("set baudrate %d is not within 5%% of desired value", "\377\374baudrate\216\241\211within 5%%\220desired\264")
MP_MATCH_COMPRESSED("sign not allowed in string format specifier", "\377sign\211\325\243\230\214\235")
MP_MATCH_COMPRESSED("sign not allowed with integer format specifier 'c'", "\377sign\211\325\242\246\214\235'c'")
MP_MATCH_COMPRESSED("single '}' encountered in format string", "\377single '}' encountered\243\214\230")
MP_MATCH_COMPRESSED("size and type of buffers must match", "\377size\250\222\220buffers\203\372")
MP_MATCH_COMPRESSED("slice step can't be zero", "\377slice step\200\215\344")
MP_MATCH_COMPRESSED("splitting with sub-captures", "\377splitting\242sub-captures")
MP_MATCH_COMPRESSED("start/end indices", "\377start/end\330")
MP_MATCH_COMPRESSED("stream operation not supported", "\377stream\310\211\225")
MP_MATCH_COMPRESSED("string index out of range", "\377\230\237\311\220\253")
MP_MATCH_COMPRESSED("string indices must be integers, not %s", "\377\230\330\203\215integers,\211\360")
MP_MATCH_COMPRESSED("struct: can't index", "\377\331\200\237")
MP_MATCH_COMPRESSED("struct: index out of range", "\377\331\237\311\220\253")
MP_MATCH_COMPRESSED("struct: no fields", "\377\331\302fields")
MP_MATCH_COMPRESSED("substring not found", "\377substring\211\315")
MP_MATCH_COMPRESSED("super() can't find self", "\377super()\200find self")
MP_MATCH_COMPRESSED("syntax error in JSON", "\377\266\275\243JSON")
MP_MATCH_COMPRESSED("syntax error in uctypes descriptor", "\377\266\275\243uctypes descriptor")
MP_MATCH_COMPRESSED("too many args", "\377\240\342args")
MP_MATCH_COMPRESSED("too many locals for native method", "\377\240\342locals\233\350\347")
MP_MATCH_COMPRESSED("too many logical units", "\377\240\342logical units")
MP_MATCH_COMPRESSED("too many values to unpack (expected %d)", "\377\240\342\354\221unpack (expected %d)")
MP_MATCH_COMPRESSED("trigger 0x%08x unsupported", "\377trigger 0x%08x\213")
MP_MATCH_COMPRESSED("tuple index out of range", "\377\322\237\311\220\253")
MP_MATCH_COMPRESSED("tuple/list too large for HID report; use bytearray instead", "\377tuple/list\240\370\233HID report;\334bytearray instead")
MP_MATCH_COMPRESSED("type '%q' isn't an acceptable base type", "\377\222\205\252\247acceptable base\222")
MP_MATCH_COMPRESSED("type object '%q' has no attribute '%q'", "\377\222\201\205\277\302\245\205")
MP_MATCH_COMPRESSED("type takes 1 or 3 arguments", "\377\222takes 1\3033\207")
MP_MATCH_COMPRESSED("unary op %q not implemented", "\377unary op\335\211\224")
MP_MATCH_COMPRESSED("unexpected indent", "unexpected indent")
MP_MATCH_COMPRESSED("unexpected keyword argument '%q'", "\377unexpected\227\206\205")
MP_MATCH_COMPRESSED("unicode name escapes", "\377unicode\307escapes")
MP_MATCH_COMPRESSED("unindent doesn't match any outer indent level", "\377unindent\202\372any outer indent level")
MP_MATCH_COMPRESSED("unknown format code '%c' for object of type '%s'", "\377\333\214code '%c'\233\201\220\222\212")
MP_MATCH_COMPRESSED("unknown type", "\377\333\222")
MP_MATCH_COMPRESSED("unknown type '%q'", "\377\333\222\205")
MP_MATCH_COMPRESSED("unmatched '{' in format", "\377unmatched '{'\243\214")
MP_MATCH_COMPRESSED("unreadable attribute", "\377unreadable\245")
MP_MATCH_COMPRESSED("unsupported Thumb instruction '%s' with %d arguments", "\377\213Thumb\366\212\242\216\207")
MP_MATCH_COMPRESSED("unsupported bits", "\377\213\337")
MP_MATCH_COMPRESSED("unsupported combination of bits and parity", "\377\213combination\220\337\250parity")
MP_MATCH_COMPRESSED("unsupported format character '%c' (0x%x) at index %d", "\377\213\214character '%c' (0x%x)\336\237\216")
MP_MATCH_COMPRESSED("unsupported logical unit", "\377\213logical unit")
MP_MATCH_COMPRESSED("unsupported trigger", "\377\213trigger")
MP_MATCH_COMPRESSED("unsupported type for %q: '%s'", "\377\213\222\233%q:\212")
MP_MATCH_COMPRESSED("unsupported types for %q: '%s', '%s'", "\377\213types\233%q: '%s',\212")
MP_MATCH_COMPRESSED("wakeup value too large", "\377wakeup\264\240\370")
MP_MATCH_COMPRESSED("wrong number of arguments", "\377\376\351\220\207")
MP_MATCH_COMPRESSED("zero step", "\377\344step")
// Total input length:      9401
// Total compressed length: 4826
// Total data length:       1138
// Predicted saving:        3437

// gzip length:             5065
// Percentage of gzip:      117.7%
// zlib length:             5053
// Percentage of zlib:      118.0%
